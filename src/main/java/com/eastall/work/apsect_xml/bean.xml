<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/aop
           				http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!--1 创建目标类 -->
	<bean id="userServiceId" class="com.eastall.work.apsect_xml.UserServiceImpl"></bean>
	<!--2 创建切面类 -->
	<bean id="myAspectId" class="com.eastall.work.apsect_xml.MyAspect"></bean>
	<!-- aop编程 
		<aop:aspect> 将切面类声明为“切面”，从而获得通知（方法）
		ref 切面类引用
		<aop:pointcut> 声明一个切入点，所有的通知都可以使用
			expression 切入点表达式
			id 	名称用于其他通知引用
		
	-->
	<aop:config>
		<aop:aspect ref="myAspectId">
			<aop:pointcut expression="execution(* com.eastall.work.apsect_xml.UserServiceImpl.*(..))" id="myPointCut"/>
			<!-- 3.1前置通知
				<aop:before method="" pointcut="" pointcut-ref="">
					method：通知，及方法名
					pointcut：切入点表达式，此表达式只能当前通知使用
					pointcut-ref：切入点引用，可以与其它通知共享切入点
					
				通知方法的格式：public void myBefore(JoinPoint joinPoint) {
				参数1：	 org.aspectj.lang.JoinPoint 用于描述连接点（目标方法）
				
				<aop:before method="myBefore" pointcut-ref="myPointCut"/>
			 -->
			 
			 <!-- 3.2 后置通知
			 	<aop:after-returning method="" pointcut-ref="" returning=""/>
			 	
			 	returning= "通知方法第二个参数的名称"
			 	通知方法的格式：public void myAfter(JoinPoint joinPoint,Object ret){
			 	参数1：连接点描述
			 	参数2：类型Object，参数名returning="ret"配置的
			 	
			 	<aop:after-returning method="myAfter" pointcut-ref="myPointCut" returning="ret"/>
			  -->
			
			<!-- 
				3.3 环绕通知
				<aop:around method="" pointcut-ref=""/>
				
				通知方法的格式：public Object myArroud(ProceedingJoinPoint jp) throws Throwable {
				
				返回值类型：Object
				方法名称：任意
				参数：org.aspectj.lang.ProceedingJoinPoint是JoinPoint的子接口
				抛出异常
				手动执行目标方法：Object obj = jp.proceed();  //ProceedingJoinPoint jp
				
				<aop:around method="myArroud" pointcut-ref="myPointCut"/>
			 -->
				
				
				
			<!-- 3.4抛出异常
				<aop:after-throwing method="" pointcut-ref="" throwing=""/>
				
				throwing=第二个方法的参数名称
				
				public void myThrow(JoinPoint jp, Throwable e) {
				通知方法格式：public void myAfterThrowing()
					参数1：连接点描述对象
					参数2：获得异常信息，类型Throwable，参数名由throwing="e" 配置
				<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
			 -->	
			 
				
				
			<!-- 3.5最终通知
				
			 -->	
			 <aop:after method="myAfter2" pointcut-ref="myPointCut"/>
		</aop:aspect>
	</aop:config>
	
</beans>
